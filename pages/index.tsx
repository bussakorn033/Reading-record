import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import sy from '../styles/record.module.scss'

import React, { useEffect, useState } from 'react'


import { useDispatch, useSelector } from '../store/store';
import { deleteRecordItem, getRecordState, ReadingRecordState, setRecordList, setRecordSelect, updateRecordList } from '../store/slices/recordSlice'
import ModalEdit from '../components/modalEdit'
import FormRecord from '../components/formRecord'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faFaceDizzy } from '@fortawesome/free-solid-svg-icons'


const Home: NextPage = () => {
  const [isSSR, setIsSSR] = useState<boolean>(true);



  const dispatch = useDispatch();
  const {
    recordList,
    recordItemSelect,
    recordIndexSelect,
  } = useSelector(getRecordState);

  const [isSelectUploadImage, setIsSelectUploadImage] = useState(true)
  const [previewImage, setPreviewImage] = useState('')
  const [isOpenModalEdit, setIsOpenModalEdit] = useState(false)

  useEffect(() => {
    setIsSSR(false);
  }, []);

  if (isSSR) { return null }


  const handleTypeImage = (e: any) => {
    setIsSelectUploadImage(e.target.id === 'uploadImage' ? true : false)
    setPreviewImage('')
  }

  const handlePreviewImage = (e: any) => {
    if (isSelectUploadImage) {
      if (!e.target.files || e.target.files.length === 0) {
        return
      }
      const imageURL = URL.createObjectURL(e.target.files[0])
      setPreviewImage(imageURL)
    } else {
      setPreviewImage(e.target.value)
    }
  }

  const handleSubmitForm = ({
    bookTitle,
    date,
    readTime,
    id,
    image,
  }: ReadingRecordState) => {

    const payload: ReadingRecordState = {
      bookTitle: bookTitle,
      date: date,
      readTime: readTime,
      image: image,
    }
    /* TODO Submit redux */
    if (id === 'Modal') {
      dispatch(updateRecordList({
        index: recordIndexSelect,
        updateDataRecord: {
          bookTitle: bookTitle,
          date: date,
          readTime: readTime,
          image: image,
        }
      }));
      setIsOpenModalEdit(false)

    } else {
      dispatch(setRecordList(payload));
    }
  }

  const handleOpenModalEdit = (item: ReadingRecordState, index: number) => {
    /* TODO Open modal edit */
    dispatch(setRecordSelect({ recordItem: item, recordIndex: index }));
    setIsOpenModalEdit(true)
  }

  const handleDeleteRecord = (index: number) => {
    /* TODO Delete record redux */
    dispatch(deleteRecordItem({ index: index }));

  }

  return (
    <div className={sy['container']}>
      <Head>
        <title>Reading record</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={sy['container-reading-record']}>

        <div className={sy['container-header']}>
          <h1 className={sy['header-text']}>Reading record</h1>
        </div>

        <div className={sy['container-body']}>
          <div className={sy['side-reading-record']}>
            <FormRecord
              id={'Create'}
              handleSubmitForm={(e: any) => handleSubmitForm(e)}
              handleTypeImage={(e: any) => handleTypeImage(e)}
              handlePreviewImage={(e: any) => handlePreviewImage(e)}
              isSelectUploadImage={isSelectUploadImage}
              previewImage={previewImage}
              setPreviewImage={(e: any) => setPreviewImage(e)}
            />


          </div>


          <div className={sy['content-record']}>
            <table>
              <tr>
                <th>No</th>
                <th>Image</th>
                <th>Book title</th>
                <th>Date</th>
                <th>Read time (Hrs)</th>
                <th>Setting</th>
              </tr>
              {recordList.length > 0 ?
                <>

                  {
                    recordList.map((item: any, index: number) => {
                      const no = index + 1
                      return (
                        <div key={`recordList-${index}`}>
                          <tr className={sy['trDetail']}>
                            <td>{no}.</td>
                            <td>
                              <div>
                                <Image
                                  loader={() => item.image}
                                  src={item.image}
                                  alt={`book-${item.bookTitle}`}
                                  width={150}
                                  height={150}
                                />
                              </div>
                            </td>
                            <td>{item.bookTitle}</td>
                            <td>{item.date}</td>
                            <td>{item.readTime}</td>
                            <td>
                              <div>
                                <button
                                  onClick={() => handleOpenModalEdit(item, index)}
                                  className={sy['btn-edit']}
                                >
                                  Edit
                                </button>
                                <div className={'mb-1'} />
                                <button
                                  onClick={() => handleDeleteRecord(index)}
                                  className={sy['btn-delete']}
                                >
                                  Delete
                                </button>
                              </div>
                            </td>
                          </tr>
                        </div>
                      )
                    })
                  }
                </>
                :
                <div className={sy['container-not-reading-record']}>
                  <FontAwesomeIcon icon={faFaceDizzy} />
                  <h1>Not found reading record </h1>
                </div>
              }
            </table>

          </div>
        </div>
      </div>
      <ModalEdit
        isOpenModal={isOpenModalEdit}
        setIsOpenModal={() => setIsOpenModalEdit(false)}
        handleSubmitForm={(e: any) => handleSubmitForm(e)}
        handleTypeImage={(e: any) => handleTypeImage(e)}
        handlePreviewImage={(e: any) => handlePreviewImage(e)}
        isSelectUploadImage={isSelectUploadImage}
        previewImage={previewImage}
        setPreviewImage={(e: any) => setPreviewImage(e)}
        recordItemSelect={recordItemSelect}
      />
    </div>
  )
}

export default Home
