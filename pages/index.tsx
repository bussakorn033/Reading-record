import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import sy from '../styles/record.module.scss'

import React, { useEffect, useState } from 'react'


import { useDispatch, useSelector } from '../store/store';
import { deleteRecordItem, getRecordState, ReadingRecordState, setRecordList, updateRecordList } from '../store/slices/recordSlice'


const Home: NextPage = () => {
  const [isSSR, setIsSSR] = useState<boolean>(true);
  // const isSSR = typeof window === "undefined"



  const dispatch = useDispatch();
  const { recordList } = useSelector(getRecordState);

  const [isSelectUploadImage, setIsSelectUploadImage] = useState(true)
  const [previewImage, setPreviewImage] = useState('')

  useEffect(() => {
    setIsSSR(false);
  }, []);

  if (isSSR) { return null }


  const handleTypeImage = (e: any) => {
    setIsSelectUploadImage(e.target.id === 'uploadImage' ? true : false)
    setPreviewImage('')
  }

  const handlePreviewImage = (e: any) => {
    if (isSelectUploadImage) {
      if (!e.target.files || e.target.files.length === 0) {
        return
      }
      const imageURL = URL.createObjectURL(e.target.files[0])
      setPreviewImage(imageURL)
    } else {
      setPreviewImage(e.target.value)
    }
  }

  const handleSubmitForm = ({
    bookTitle,
    date,
    readTime,
  }: ReadingRecordState) => {

    const payload: ReadingRecordState = {
      bookTitle: bookTitle,
      date: date,
      readTime: readTime,
      image: previewImage,
    }
    /* TODO Submit redux */
    dispatch(setRecordList(payload));
  }

  const handleEditRecord = (index: number) => {
    /* TODO Update record redux */
    const updateDataRecord = {

    }

    dispatch(updateRecordList({
      index,
      updateDataRecord,
    }
    ));
  }

  const handleDeleteRecord = (index: number) => {
    /* TODO Delete record redux */
    dispatch(deleteRecordItem(index));

  }

  console.log('recordList', recordList)
  return (
    <div className={sy['container']}>
      <Head>
        <title>Reading record</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={sy['container-reading-record']}>

        <div className={sy['container-header']}>
          <h1 className={sy['header-text']}>Reading record</h1>
        </div>

        <div className={sy['container-body']}>
          <div className={sy['side-reading-record']}>

            <form
              onSubmit={(e: React.SyntheticEvent) => {
                e.preventDefault();
                const target = e.target as typeof e.target & {
                  bookTitle: { value: string };
                  date: { value: string };
                  readTime: { value: number };
                  // typeImage: { value: string };
                  // image: { value: any };
                };
                const bookTitle: string = target.bookTitle.value; // typechecks!
                const date: string = target.date.value; // typechecks!
                const readTime: number = Number(target.readTime.value); // typechecks!

                const payload: ReadingRecordState = {
                  bookTitle: bookTitle,
                  date: date,
                  readTime: readTime,
                }
                handleSubmitForm(payload)

              }}
            >
              <div>
                <div className={'flex-col'}>
                  <label>
                    Title of book
                  </label>
                  <input
                    type="text"
                    name="bookTitle"
                    placeholder='Title of book'
                  />
                </div>

                <div className={'flex-col'}>
                  <label>
                    Date
                  </label>
                  <input
                    type="date"
                    name="date"
                    placeholder='Date'
                  />
                </div>

                <div className={'flex-col'}>
                  <label>
                    Read time (Hrs)
                  </label>
                  <input
                    type="number"
                    step="0.5"
                    pattern="[0-9\/]"
                    name="readTime"
                    placeholder='Read time'
                  />
                </div>

                <div className={'mb-1 flex-col'}>
                  <div >
                    <input
                      onChange={(e) => handleTypeImage(e)}
                      checked={isSelectUploadImage}
                      name="typeImage" value="uploadImage" id="uploadImage" type="radio" /><label>Upload image</label>
                  </div>
                  <div>
                    <input
                      onChange={(e) => handleTypeImage(e)}
                      name="typeImage" value="linkImage" id="linkImage" type="radio" /><label>Link image</label>
                  </div>
                </div>

                <div className=''>
                  {isSelectUploadImage ?
                    (
                      <>
                        <div className={'flex-col'}>
                          <label>
                            Upload image
                          </label>
                          <input
                            type="file"
                            accept="image/png, image/jpeg"
                            name="image"
                            placeholder='Upload image'
                            onChange={(e) => handlePreviewImage(e)}
                          />
                        </div>
                      </>
                    )
                    :
                    (
                      <>
                        <div className={'flex-col'}>
                          <label>
                            Link image
                          </label>
                          <input
                            type="text"
                            name="image"
                            placeholder='Link image'
                            onChange={(e) => handlePreviewImage(e)}
                          />
                        </div>
                      </>
                    )
                  }
                  {(
                    previewImage.includes('http') ||
                    previewImage.includes('https')
                  ) &&
                    (
                      <>
                        <div>
                          <Image
                            loader={() => previewImage}
                            src={previewImage}
                            alt='previewImage'
                            width={150}
                            height={150}
                          />
                        </div>
                      </>
                    )
                  }
                </div>
              </div>

              <div>
                <input className={sy['btn-submit']} type="submit" value="Submit" />
              </div>

            </form>

          </div>


          <div className={sy['content-record']}>
            <table>
              <tr>
                <th>No</th>
                <th>Image</th>
                <th>Book title</th>
                <th>Date</th>
                <th>Read time (Hrs)</th>
                <th>Setting</th>
              </tr>
              {
                recordList.length > 0 && recordList.map((item: any, index: number) => {
                  const no = index + 1
                  return (
                    <div key={`recordList-${index}`}>
                      {/* <table >
                      {index <= 0 && (
                        <tr>
                          <th>No</th>
                          <th>Image</th>
                          <th>Book title</th>
                          <th>Date</th>
                          <th>Read time (Hrs)</th>
                          <th>Setting</th>
                        </tr>
                      )} */}
                      <tr className={sy['trDetail']}>
                        <td>{no}.</td>
                        <td>
                          {/* {item.image} */}
                          <div>
                            <Image
                              loader={() => item.image}
                              src={item.image}
                              alt={`book-${no}`}
                              width={150}
                              height={150}
                            />
                          </div>
                        </td>
                        <td>{item.bookTitle}</td>
                        <td>{item.date}</td>
                        <td>{item.readTime}</td>
                        <td>
                          {/* setting */}
                          <div>
                            <button
                              onClick={() => handleEditRecord(index)}
                              className={sy['btn-edit']}
                            >
                              Edit
                            </button>
                            <div className={'mb-1'} />
                            <button
                              onClick={() => handleDeleteRecord(index)}
                              className={sy['btn-delete']}
                            >
                              Delete
                            </button>
                          </div>
                        </td>
                      </tr>
                      {/* </table> */}
                    </div>
                  )
                })
              }
            </table>
          </div>
        </div>
      </div >
    </div >
  )
}

export default Home
